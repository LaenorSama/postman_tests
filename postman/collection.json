{
  "info": {
    "_postman_id": "73115df4-93dc-4da6-b5f2-d1818f4ac632",
    "name": "TestOps",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "15533505",
    "_collection_link": "https://landeron-team.postman.co/workspace/My-Workspace~5b301d1f-af4c-4b52-89f6-fe1cca8e4679/collection/15533505-73115df4-93dc-4da6-b5f2-d1818f4ac632?action=share&source=collection_link&creator=15533505"
  },
  "item": [
    {
      "name": "Get assigned members",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{JWT_TOKEN}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{ENDPOINT}}/api/launch/1797/assignees",
          "host": [
            "{{ENDPOINT}}"
          ],
          "path": [
            "api",
            "launch",
            "1797",
            "assignees"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get projects",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{JWT_TOKEN}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{ENDPOINT}}/api/project?page=0&size=100&sort=name%2CASC",
          "host": [
            "{{ENDPOINT}}"
          ],
          "path": [
            "api",
            "project"
          ],
          "query": [
            {
              "key": "page",
              "value": "0"
            },
            {
              "key": "size",
              "value": "100"
            },
            {
              "key": "sort",
              "value": "name%2CASC"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "pm.sendRequest({",
          "    url: \"https://demo.qatools.cloud/api/uaa/oauth/token\",",
          "    method: \"POST\",",
          "    header: {",
          "        \"Accept\": \"application/json\"",
          "    },",
          "    body: {",
          "        mode: \"urlencoded\",",
          "        urlencoded: [",
          "            { key: \"grant_type\", value: \"apitoken\", type: \"text\" },",
          "            { key: \"scope\", value: \"openid\", type: \"text\" },",
          "            { key: \"token\", value: pm.environment.get(\"TOKEN\"), type: \"text\" }",
          "        ]",
          "    }",
          "}, function (err, res) {",
          "    if (!err && res.json().access_token) {",
          "        var token = res.json().access_token;",
          "        pm.environment.set(\"JWT_TOKEN\", token);",
          "    }",
          "});"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "let currentResults = JSON.parse(pm.globals.get(\"testResults\"));",
          "let logMessage = `–ó–∞–ø—Ä–æ—Å: ${pm.info.requestName}\\n–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${pm.response.code}\\n–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${pm.response.responseTime} –º—Å\\n`;",
          "pm.test(\"Log attachment\", function () {",
          "    let logFileName = pm.info.requestName + \"_log.txt\";",
          "    let logContent = logMessage + \"\\n\\n----- Test Log End -----\";",
          "    allure.addAttachment(logFileName, logContent, 'text/plain');",
          "});",
          "var testName = \"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ 200 –¥–ª—è Get assigned members\";",
          "var passed = pm.response.code === 200;",
          "pm.test(\"Test: \" + testName, () => { pm.expect(pm.response.code).to.eql(200); });",
          "var responseTime = pm.response.responseTime;",
          "console.log(`‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Get assigned members: ${responseTime} –º—Å`);",
          "console.log(`üìã –¢–µ—Å—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: ${pm.info.requestName}`);",
          "console.log(`${passed ? \"‚úÖ\" : \"‚ùå\"} ${testName}`);",
          "currentResults.push({",
          "    request: pm.info.requestName,",
          "    test: testName,",
          "    passed: passed,",
          "    status: pm.response.code,",
          "    time: responseTime",
          "});",
          "pm.globals.set(\"testResults\", JSON.stringify(currentResults));"
        ]
      }
    }
  ]
}
