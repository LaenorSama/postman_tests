{
  "info": {
    "name": "QATools API Tests",
    "description": "–ö–æ–ª–ª–µ–∫—Ü–∏—è Postman —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "qatools-api-tests"
  },
  "item": [
    {
      "name": "GET Launch Assignees",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{JWT_TOKEN}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{ENDPOINT}}/api/launch/1490/assignees",
          "host": [
            "{{ENDPOINT}}"
          ],
          "path": [
            "api",
            "launch",
            "1490",
            "assignees"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.sendRequest({",
              "    url: \"https://demo.qatools.cloud/api/uaa/oauth/token\",",
              "    method: \"POST\",",
              "    header: {",
              "        \"Accept\": \"application/json\"",
              "    },",
              "    body: {",
              "        mode: \"urlencoded\",",
              "        urlencoded: [",
              "            { key: \"grant_type\", value: \"apitoken\", type: \"text\" },",
              "            { key: \"scope\", value: \"openid\", type: \"text\" },",
              "            { key: \"token\", value: pm.environment.get(\"TOKEN\"), type: \"text\" }",
              "        ]",
              "    }",
              "}, function (err, res) {",
              "    if (!err && res.json().access_token) {",
              "        var token = res.json().access_token;",
              "        pm.environment.set(\"JWT_TOKEN\", token);",
              "        console.log(\"Bearer-—Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω!\");",
              "    } else {",
              "        console.log(\"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:\", err || res.text());",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤",
              "if (!pm.globals.has(\"testResults\")) {",
              "    pm.globals.set(\"testResults\", JSON.stringify([]));",
              "}",
              "let currentResults = JSON.parse(pm.globals.get(\"testResults\"));",
              "",
              "// –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ç–µ—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞",
              "let testName = \"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ 200\";",
              "let passed = pm.response.code === 200;",
              "",
              "// –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é responseTime –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
              "let responseTime = pm.response.responseTime;",
              "pm.test(testName, () => {",
              "    pm.expect(pm.response.code).to.eql(200);",
              "});",
              "",
              "// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
              "console.log(`‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime} –º—Å`);",
              "console.log(`üìã –¢–µ—Å—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: ${pm.info.requestName}`);",
              "console.log(`${passed ? \"‚úÖ\" : \"‚ùå\"} ${testName}`);",
              "",
              "// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤",
              "currentResults.push({",
              "    request: pm.info.requestName,",
              "    test: testName,",
              "    passed: passed,",
              "    status: pm.response.code,",
              "    time: responseTime",
              "});",
              "pm.globals.set(\"testResults\", JSON.stringify(currentResults));",
              "",
              "// –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º",
              "let totalRequests = parseInt(pm.environment.get(\"totalRequests\") || \"0\") + 1;",
              "let totalTime = parseInt(pm.environment.get(\"totalTime\") || \"0\") + responseTime;",
              "",
              "pm.environment.set(\"totalRequests\", totalRequests);",
              "pm.environment.set(\"totalTime\", totalTime);",
              "pm.environment.set(\"avgTime\", (totalTime / totalRequests).toFixed(2));",
              "",
              "// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤",
              "if (!passed) {",
              "    let failures = pm.environment.get(\"failures\") || \"\";",
              "    failures += `\\n[${pm.info.requestName}] - —Å—Ç–∞—Ç—É—Å: ${pm.response.code}`;",
              "    pm.environment.set(\"failures\", failures);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "GET Projects",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{JWT_TOKEN}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{ENDPOINT}}/api/project?page=0&size=100&sort=name%2CASC",
          "host": [
            "{{ENDPOINT}}"
          ],
          "path": [
            "api",
            "project"
          ],
          "query": [
            {
              "key": "page",
              "value": "0"
            },
            {
              "key": "size",
              "value": "100"
            },
            {
              "key": "sort",
              "value": "name,ASC"
            }
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.sendRequest({",
              "    url: \"https://demo.qatools.cloud/api/uaa/oauth/token\",",
              "    method: \"POST\",",
              "    header: {",
              "        \"Accept\": \"application/json\"",
              "    },",
              "    body: {",
              "        mode: \"urlencoded\",",
              "        urlencoded: [",
              "            { key: \"grant_type\", value: \"apitoken\", type: \"text\" },",
              "            { key: \"scope\", value: \"openid\", type: \"text\" },",
              "            { key: \"token\", value: pm.environment.get(\"TOKEN\"), type: \"text\" }",
              "        ]",
              "    }",
              "}, function (err, res) {",
              "    if (!err && res.json().access_token) {",
              "        var token = res.json().access_token;",
              "        pm.environment.set(\"JWT_TOKEN\", token);",
              "        console.log(\"Bearer-—Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω!\");",
              "    } else {",
              "        console.log(\"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:\", err || res.text());",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤",
              "if (!pm.globals.has(\"testResults\")) {",
              "    pm.globals.set(\"testResults\", JSON.stringify([]));",
              "}",
              "let currentResults = JSON.parse(pm.globals.get(\"testResults\"));",
              "",
              "// –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ç–µ—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞",
              "let testName = \"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ 200\";",
              "let passed = pm.response.code === 200;",
              "",
              "// –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é responseTime –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
              "let responseTime = pm.response.responseTime;",
              "pm.test(testName, () => {",
              "    pm.expect(pm.response.code).to.eql(200);",
              "});",
              "",
              "// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
              "console.log(`‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime} –º—Å`);",
              "console.log(`üìã –¢–µ—Å—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: ${pm.info.requestName}`);",
              "console.log(`${passed ? \"‚úÖ\" : \"‚ùå\"} ${testName}`);",
              "",
              "// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤",
              "currentResults.push({",
              "    request: pm.info.requestName,",
              "    test: testName,",
              "    passed: passed,",
              "    status: pm.response.code,",
              "    time: responseTime",
              "});",
              "pm.globals.set(\"testResults\", JSON.stringify(currentResults));",
              "",
              "// –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º",
              "let totalRequests = parseInt(pm.environment.get(\"totalRequests\") || \"0\") + 1;",
              "let totalTime = parseInt(pm.environment.get(\"totalTime\") || \"0\") + responseTime;",
              "",
              "pm.environment.set(\"totalRequests\", totalRequests);",
              "pm.environment.set(\"totalTime\", totalTime);",
              "pm.environment.set(\"avgTime\", (totalTime / totalRequests).toFixed(2));",
              "",
              "// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤",
              "if (!passed) {",
              "    let failures = pm.environment.get(\"failures\") || \"\";",
              "    failures += `\\n[${pm.info.requestName}] - —Å—Ç–∞—Ç—É—Å: ${pm.response.code}`;",
              "    pm.environment.set(\"failures\", failures);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}
